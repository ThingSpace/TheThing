generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String     @id @unique @default(uuid())
  username      String     @unique
  password      String
  email         String?
  createdAt     DateTime   @default(now())
  styling       Int        @default(0)
  isBlacklisted Boolean    @default(false)
  acceptedRules Boolean    @default(false)
  acceptedTerms Boolean    @default(false)
  role          Role       @default(USER)
  ApiKey        ApiKey[]
  comments      Comment[]
  feedbacks     Feedback[]
  journals      Journal[]
  posts         Post[]
}

model Post {
  id               String    @id @unique @default(uuid())
  text             String
  at               DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  userId           String?
  isPublished      Boolean   @default(true)
  flagReason       String?
  isFlagged        Boolean?  @default(false)
  moderationScores Json?
  needsReview      Boolean?  @default(false)
  Comment          Comment[]
  User             User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id      String    @id @unique @default(uuid())
  text    String
  at      DateTime? @default(now())
  postsId String
  userId  String
  post    Post      @relation(fields: [postsId], references: [id])
  author  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journal {
  id               String    @id @unique @default(uuid())
  title            String
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  userId           String
  styling          Int       @default(0)
  isPublic         Boolean   @default(false)
  flagReason       String?
  isFlagged        Boolean   @default(false)
  moderationScores Json?
  needsReview      Boolean?  @default(false)
  entries          Entry[]
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Entry {
  id               String    @id @unique @default(uuid())
  title            String
  text             String
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  authorId         String
  journalId        String
  flagReason       String?
  isFlagged        Boolean?  @default(false)
  moderationScores Json?
  needsReview      Boolean?  @default(false)
  journal          Journal   @relation(fields: [journalId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String    @id @unique @default(uuid())
  text      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id])
}

model ApiKey {
  id        String   @id
  key       String   @unique
  adminId   String
  createdAt DateTime @default(now())
  thingyMod Boolean  @default(false)
  User      User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MODERATOR
  USER
}
